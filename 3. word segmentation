{"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":26580,"status":"ok","timestamp":1675456616182,"user":{"displayName":"YH Lin","userId":"13621128046372297072"},"user_tz":-540},"id":"zzhYUvW8uFOm","outputId":"491534f8-c9b6-4a37-8018-accaf742f89e"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/gdrive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/gdrive')"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"_37DwWNmvDFJ"},"outputs":[],"source":["import pandas as pd\n","import numpy as np\n","\n","import os\n","\n","import regex as re"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"l9z9JSUgvFmt"},"outputs":[],"source":["# install ckiptagger\n","!pip install -U ckiptagger[tf,gdown]\n","display.clear_output()"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"PqeVB0JqvKDy"},"outputs":[],"source":["from ckiptagger import data_utils, construct_dictionary, WS, POS, NER"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":292,"status":"ok","timestamp":1675456704601,"user":{"displayName":"YH Lin","userId":"13621128046372297072"},"user_tz":-540},"id":"SelsSLrduPb7","outputId":"5c52cc28-316d-453d-dc94-42daf8a0ad68"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["['LICENSE',\n"," 'model_ner',\n"," 'embedding_character',\n"," 'embedding_word',\n"," 'model_pos',\n"," 'model_ws']"]},"metadata":{},"execution_count":5}],"source":["# check if file for segmentation is succefully downloaded in the drive\n","os.listdir(\"/content/gdrive/MyDrive/1_media proj/data\")"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":73712,"status":"ok","timestamp":1675456778310,"user":{"displayName":"YH Lin","userId":"13621128046372297072"},"user_tz":-540},"id":"-y2McY95yoXV","outputId":"eb56add2-050c-463c-cb5d-cc65cfa5b635"},"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.8/dist-packages/ckiptagger/model_ws.py:106: UserWarning: `tf.nn.rnn_cell.LSTMCell` is deprecated and will be removed in a future version. This class is equivalent as `tf.keras.layers.LSTMCell`, and will be replaced by that in Tensorflow 2.0.\n","  cell = tf.compat.v1.nn.rnn_cell.LSTMCell(hidden_d, name=name)\n","/usr/local/lib/python3.8/dist-packages/ckiptagger/model_pos.py:56: UserWarning: `tf.nn.rnn_cell.LSTMCell` is deprecated and will be removed in a future version. This class is equivalent as `tf.keras.layers.LSTMCell`, and will be replaced by that in Tensorflow 2.0.\n","  cell = tf.compat.v1.nn.rnn_cell.LSTMCell(hidden_d, name=name)\n","/usr/local/lib/python3.8/dist-packages/ckiptagger/model_ner.py:57: UserWarning: `tf.nn.rnn_cell.LSTMCell` is deprecated and will be removed in a future version. This class is equivalent as `tf.keras.layers.LSTMCell`, and will be replaced by that in Tensorflow 2.0.\n","  cell = tf.compat.v1.nn.rnn_cell.LSTMCell(hidden_d, name=name)\n"]}],"source":["# loading the model for word processing\n","ws = WS(\"/content/gdrive/MyDrive/1_media proj/data\")\n","pos = POS(\"/content/gdrive/MyDrive/1_media proj/data\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"UkPibI6-1xAF"},"outputs":[],"source":["# read in cleaned crawled file\n","data = pd.read_csv(\"/content/lesbian_clean.json\")"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"5xHJBNGq2SXO"},"outputs":[],"source":["# segmentation\n","word_sentence_list = ws(data)"]},{"cell_type":"code","source":["# download the data, ensure_ascii = False in case of ZH word become garbled\n","with open(\"lesbian_pos.json\", \"w\") as output:\n","    output.write(json.dumps(word_sentence_list, ensure_ascii = False))"],"metadata":{"id":"vK0ikz_kiZ2k"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"N7JbAbST3zVq"},"outputs":[],"source":["# pos tag\n","pos_sentence_list = pos(word_sentence_list)"]},{"cell_type":"code","execution_count":null,"metadata":{"id":"pjUEBr7cfEjq"},"outputs":[],"source":["with open(\"lesbian_pos.json\", \"w\") as output:\n","    output.write(json.dumps(pos_sentence_list, ensure_ascii = False))"]}],"metadata":{"colab":{"provenance":[{"file_id":"1VsUeSwFGxDrtJkis0DBKxt0L6ewx7Pnv","timestamp":1675633049647}],"authorship_tag":"ABX9TyN9JBjEu3jeTTDQnAyFWP7Q"},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}